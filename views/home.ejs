<%- include ('partials/header.ejs') %>
<%- include ('partials/navbar-user.ejs') %>

<main class="main-content home-dashboard">
  <%- include ('partials/navbar-lateral.ejs') %>
  <section class="dashboard-container">
    <header class="dashboard-header">
      <h1>Início</h1>
      <div class="property-select">
        <label for="propriedades">Propriedade</label>
        <div class="select-wrapper">
          <% if (Propriedades && Propriedades.length > 0) { %>
            <select id="propriedades" class="property-dropdown">
              <% Propriedades.forEach(prop => { %>
                <option value="<%= prop.id_propriedade %>" <%= propriedadeSelecionada == prop.id_propriedade ? 'selected' : '' %>><%= prop.nome %></option>
              <% }) %>
            </select>
          <% } else { %>
            <select id="propriedades" class="property-dropdown" disabled>
              <option>Nenhuma propriedade cadastrada</option>
            </select>
          <% } %>
        </div>
      </div>
    </header>

    <section class="upload-card">
      <div class="upload-card-content">
        <button type="button" class="primary-upload-button" id="btn-upload">
          <span class="upload-icon">+</span>
          Escanear Imagem
        </button>
        <input type="file" id="file-input" accept="image/*">
        <p class="upload-note">*Certifique-se que a folha esteja visível</p>
        <p class="upload-status"><%= mensagemStatus %></p>
      </div>
    </section>

    <section class="analysis-section">
      <h2>Análises Gerais</h2>
      <div class="analysis-grid">
        <article class="analysis-card">
          <header class="card-header">
            <h3>Ocorrências totais de deficiências em %</h3>
          </header>
          <div class="card-body">
            <canvas id="chart-deficiencias"></canvas>
            <div id="deficiencias-empty" class="empty-state hidden">Nenhuma análise feita recentemente</div>
            <ul class="analysis-legend">
              <li>
                <span class="legend-color cobre"></span>
                <div>
                  <strong><%= resumoDeficiencias.percentuais.cobre %>%</strong>
                  <span>Cobre</span>
                </div>
              </li>
              <li>
                <span class="legend-color manganes"></span>
                <div>
                  <strong><%= resumoDeficiencias.percentuais.manganes %>%</strong>
                  <span>Manganês</span>
                </div>
              </li>
              <li>
                <span class="legend-color outros"></span>
                <div>
                  <strong><%= resumoDeficiencias.percentuais.outros %>%</strong>
                  <span>Adversos</span>
                </div>
              </li>
            </ul>
            <p class="analysis-total"><strong><%= totalPesAnalisados %></strong> pés analisados</p>
          </div>
          <div class="card-footer">
            <button type="button" class="card-action">Detalhar</button>
          </div>
        </article>

        <article class="analysis-card">
          <header class="card-header">
            <h3>Deficiência por Talhão</h3>
            <span class="card-subtitle">Últimos três talhões</span>
          </header>
          <div class="card-body">
            <canvas id="chart-talhao"></canvas>
            <div id="talhoes-empty" class="empty-state hidden"><%= talhoesMensagem || 'Nenhum dado disponível' %></div>
          </div>
          <div class="card-footer">
            <button type="button" class="card-action">Detalhar</button>
          </div>
        </article>

        <article class="analysis-card">
          <header class="card-header">
            <h3>Evolução das Deficiências (%)</h3>
            <span class="card-subtitle">Últimas quatro análises</span>
          </header>
          <div class="card-body">
            <canvas id="chart-evolucao"></canvas>
            <div id="evolucao-empty" class="empty-state hidden"><%= evolucaoMensagem || 'Nenhum dado feito nos últimos meses' %></div>
          </div>
          <div class="card-footer">
            <button type="button" class="card-action">Detalhar</button>
          </div>
        </article>
      </div>
    </section>
  </section>
</main>

<%- include ('partials/footer.ejs') %>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  const resumoDeficiencias = <%- JSON.stringify(resumoDeficiencias) %>;
  const totalPesAnalisados = <%- JSON.stringify(totalPesAnalisados) %>;
  const talhoesComparacao = <%- JSON.stringify(talhoesComparacao) %>;
  const talhoesMensagem = <%- JSON.stringify(talhoesMensagem) %>;
  const evolucaoAnalises = <%- JSON.stringify(evolucaoAnalises) %>;
  const evolucaoMensagem = <%- JSON.stringify(evolucaoMensagem) %>;
  const maxTalhaoValor = <%- JSON.stringify(maxTalhaoValor || 0) %>;

  const donutCanvas = document.getElementById('chart-deficiencias');
  const donutEmpty = document.getElementById('deficiencias-empty');
  if (resumoDeficiencias && resumoDeficiencias.total > 0) {
    new Chart(donutCanvas, {
      type: 'doughnut',
      data: {
        labels: ['Cobre', 'Manganês', 'Adversos'],
        datasets: [{
          data: [resumoDeficiencias.totais.cobre, resumoDeficiencias.totais.manganes, resumoDeficiencias.totais.outros],
          backgroundColor: ['#D84A0F', '#FFB534', '#ACACAC'],
          borderWidth: 0,
          hoverOffset: 6
        }]
      },
      options: {
        plugins: {
          legend: { display: false },
          tooltip: {
            callbacks: {
              label(context) {
                const value = context.raw || 0;
                const percent = resumoDeficiencias.total ? Math.round((value * 100) / resumoDeficiencias.total) : 0;
                return `${context.label}: ${percent}%`;
              }
            }
          }
        },
        cutout: '60%'
      }
    });
  } else if (donutCanvas && donutEmpty) {
    donutCanvas.classList.add('hidden');
    donutEmpty.classList.remove('hidden');
  }

  const talhaoCanvas = document.getElementById('chart-talhao');
  const talhoesEmpty = document.getElementById('talhoes-empty');
  const possuiTalhoes = Array.isArray(talhoesComparacao) && talhoesComparacao.length > 0 && talhoesComparacao.some(item => item.cobre || item.manganes);
  if (talhaoCanvas && possuiTalhoes) {
    new Chart(talhaoCanvas, {
      type: 'bar',
      data: {
        labels: talhoesComparacao.map(item => item.nome),
        datasets: [
          {
            label: 'Cobre',
            data: talhoesComparacao.map(item => item.cobre),
            backgroundColor: '#D84A0F',
            borderRadius: 6
          },
          {
            label: 'Manganês',
            data: talhoesComparacao.map(item => item.manganes),
            backgroundColor: '#FFB534',
            borderRadius: 6
          }
        ]
      },
      options: {
        plugins: {
          legend: {
            display: true,
            position: 'bottom',
            labels: {
              usePointStyle: true,
              pointStyle: 'rectRounded',
              padding: 16,
              color: '#351102',
              font: {
                size: 12,
                family: 'Roboto',
                weight: '600'
              }
            }
          }
        },
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          x: {
            ticks: {
              color: '#351102',
              font: {
                family: 'Roboto',
                weight: '600'
              }
            },
            grid: { display: false }
          },
          y: {
            beginAtZero: true,
            suggestedMax: maxTalhaoValor ? maxTalhaoValor + 2 : 5,
            ticks: {
              precision: 0,
              color: '#351102',
              font: {
                family: 'Roboto',
                weight: '600'
              }
            },
            grid: {
              color: '#F2D6A4'
            }
          }
        }
      }
    });
  } else if (talhaoCanvas && talhoesEmpty) {
    talhaoCanvas.classList.add('hidden');
    talhoesEmpty.textContent = talhoesMensagem || 'Nenhum dado disponível';
    talhoesEmpty.classList.remove('hidden');
  }

  const evolucaoCanvas = document.getElementById('chart-evolucao');
  const evolucaoEmpty = document.getElementById('evolucao-empty');
  const possuiEvolucao = Array.isArray(evolucaoAnalises?.datas) && evolucaoAnalises.datas.length > 0 && (evolucaoAnalises.cobre.some(value => value > 0) || evolucaoAnalises.manganes.some(value => value > 0));
  if (evolucaoCanvas && possuiEvolucao) {
    new Chart(evolucaoCanvas, {
      type: 'bar',
      data: {
        labels: evolucaoAnalises.datas,
        datasets: [
          {
            label: 'Cobre',
            data: evolucaoAnalises.cobre,
            backgroundColor: '#D84A0F',
            borderRadius: 6
          },
          {
            label: 'Manganês',
            data: evolucaoAnalises.manganes,
            backgroundColor: '#FFB534',
            borderRadius: 6
          }
        ]
      },
      options: {
        plugins: {
          legend: {
            display: true,
            position: 'bottom',
            labels: {
              usePointStyle: true,
              pointStyle: 'rectRounded',
              padding: 16,
              color: '#351102',
              font: {
                size: 12,
                family: 'Roboto',
                weight: '600'
              }
            }
          },
          tooltip: {
            callbacks: {
              label(context) {
                return `${context.dataset.label}: ${context.raw}%`;
              }
            }
          }
        },
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          x: {
            ticks: {
              color: '#351102',
              font: {
                family: 'Roboto',
                weight: '600'
              }
            },
            grid: { display: false }
          },
          y: {
            beginAtZero: true,
            suggestedMax: 100,
            ticks: {
              callback(value) {
                return `${value}%`;
              },
              color: '#351102',
              font: {
                family: 'Roboto',
                weight: '600'
              }
            },
            grid: {
              color: '#F2D6A4'
            }
          }
        }
      }
    });
  } else if (evolucaoCanvas && evolucaoEmpty) {
    evolucaoCanvas.classList.add('hidden');
    evolucaoEmpty.textContent = evolucaoMensagem || 'Nenhum dado feito nos últimos meses';
    evolucaoEmpty.classList.remove('hidden');
  }
</script>
<script src="/js/propselecionada.js"></script>
<script src="/script/upload.js"></script>
